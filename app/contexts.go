// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "auth": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/tikasan/goa-oauth2-practice/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-oauth2-practice
// --version=v1.1.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CallbackOauthContext provides the oauth callback action context.
type CallbackOauthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Code string
}

// NewCallbackOauthContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth controller callback action.
func NewCallbackOauthContext(ctx context.Context, r *http.Request, service *goa.Service) (*CallbackOauthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CallbackOauthContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCode := req.Params["code"]
	if len(paramCode) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("code"))
	} else {
		rawCode := paramCode[0]
		rctx.Code = rawCode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CallbackOauthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CallbackOauthContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// LoginOauthContext provides the oauth login action context.
type LoginOauthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLoginOauthContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth controller login action.
func NewLoginOauthContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginOauthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginOauthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginOauthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Found sends a HTTP response with status code 302.
func (ctx *LoginOauthContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginOauthContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}
